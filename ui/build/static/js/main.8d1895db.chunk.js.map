{"version":3,"sources":["index.css","util/util.ts","util/constants.ts","util/redux.ts","compat.ts","util/vector.ts","util/orbit.ts","util/resetLevel.ts","util/tick.ts","components/Planet/Planet.component.tsx","components/Planet/Planet.container.ts","components/Ship/Ship.component.tsx","components/Ship/Ship.container.ts","components/Viewport/Viewport.component.tsx","components/Viewport/Viewport.container.ts","components/Game/Game.container.ts","components/Game/Game.component.tsx","util/useTimer.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["sci","num","exp","Math","pow","getMass","r","d","PI","vSphere","rEarth","rSun","rJupiter","aEarth","G","dT","zoomSpeed","planet","entity","module","default","id","attributes","mass","name","radius","view","minViewSize","borderColor","color","deltaV","time","angle","timerDef","steps","timer","singleton","ship","position","x","y","velocity","initialPosition","initialVelocity","game","startId","targetId","status","moonshotReducer","theReducerEntities","theReducer","theReducerSingletons","random","randomRaw","seedrandom","seedrandomRaw","Vector","f","vectors","map","prop","a","b","m","sqrt","GPrime","period","p","orbit","parent","abs2scr","offset","zoom","o","getDistance","t","getPosition","_getPosition","memoize","s","M","n","v0","floor","E","options","maxSteps","maxDelta","min","max","curMin","curMax","check","abs","avg","solve","e","sin","cosE","cos","sinV","cosV","vl","parentPos","keyGen","objectId","args","getNewPlanet","sun","i","isGasGiant","bool","float","w","moons","int","bodies","j","moonId","moonRadius","moonMass","moonA","push","resetLevel","level","planets","use","getNewSun","seed","count","newPlanets","concat","start","sort","aVal","target","startPlanetPosition","orbitalHeight","startPlanetVelocity","shipVelocity","levelData","newShip","console","log","gravityForce","reduce","totalForce","pPos","dir","l","tick","deltaVs","filter","newStatus","finalTime","p0","a1","v1","a2","v","v2","a3","v3","a4","v4","vNext","rk4","matchingDeltaV","length","forEach","getContainerStyle","scrPos","displayRadius","size","height","left","top","width","getPlanetStyle","background","borderRadius","getDotStyle","Planet","connect","state","props","get","dispatch","className","style","onClick","getShipStyle","transform","transformOrigin","Ship","curDeltaV","first","getMultiple","prevDeltaV","last","nextDeltaV","prevAngle","prevTime","nextAngle","nextTime","flameOpacity","sinceLastBurn","update","icon","faRocket","faFireAlt","opacity","zoomMul","Viewport","React","setOffset","setSize","center","setCenter","ref","current","offsetWidth","offsetHeight","dragging","setDragging","stopDragging","setZoom","initialSelectedPlanetId","selectedPlanet","setSelectedPlanet","updateSelectedPlanet","undefined","distance","setDistance","planetPos","selectedPlanetCenter","initialCenter","toFixed","onMouseDown","onMouseUp","onMouseLeave","onMouseMove","newCenter","movementX","movementY","onWheel","mul","deltaY","z","key","curId","Game","addDeltaV","add","lose","onChangeDeltaV","field","value","onDeleteDeltaV","delete","clear","addMultiple","updateShip","updateSpeed","updateTime","win","includes","interval","onTick","isRunning","setIsRunning","stop","window","setInterval","clearInterval","useTimer","setLevel","changeLevel","newLevel","resetTrigger","setResetTrigger","reset","Sider","faMoon","faStepBackward","title","faStepForward","h","faFastBackward","faBackward","faPause","faPlay","faForward","dataSource","rowKey","pagination","margin","maxHeight","overflow","Column","dataIndex","render","record","onChange","step","CloseCircleOutlined","PlusOutlined","Content","visible","footer","onCancel","App","reducers","useLogger","middleware","initialState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8d1895db.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/index.ddd668af.css\";","import { aEarth, G } from \"./constants\";\r\n\r\nexport const sci = (num:number, exp:number):number => num * Math.pow(10, exp);\r\nexport const vSphere = (r:number):number => 4/3 * Math.PI * r * r * r;\r\nexport const getMass = (r:number, d:number) => d * vSphere(r);\r\nexport const orbitalSpeed = (M:number, a:number) => Math.sqrt(G * M / a);\r\n\r\nexport const lengthDisplay = (d:number) => {\r\n    if(d > aEarth) {return `${(d/aEarth).toFixed(2)} AU`}\r\n    if(d > 1000000000) {return `${(d/1000000000).toFixed(2)} million km`}\r\n    if(d > 1000000) {return `${(d/1000000).toFixed(2)} thousand km`}\r\n    return `${(d/1000).toFixed(2)} km`;\r\n}\r\n","import { sci } from \"./util\";\r\n\r\nexport const rEarth = sci(6.378, 6); // m\r\nexport const dRock = 5514; // kg/m^3\r\nexport const rSun = sci(6.957, 8); // kg\r\nexport const dGasGiant = 1400; // kg/m^3\r\nexport const rJupiter = sci(7, 7);\r\nexport const aEarth = sci(1.49, 11);\r\n\r\nexport const G = sci(6.674, -11);\r\n\r\nexport const tickInterval = 25;\r\nexport const dT = 200;\r\nexport const baseSpeed = 1000 / tickInterval * dT;\r\n\r\nexport const zoomSpeed = 1.2;\r\n","import { Entity, entity, IEntityDefinition, ISingletonDefinition, Singleton, singleton, theReducer } from 'the-reducer';\r\nimport { dT } from './constants';\r\nimport { IDeltaV, IShip, ITimer, ViewableCelestialObject, IGame } from './sim';\r\n\r\n// --------------------------- //\r\n\r\nconst planetDef:IEntityDefinition<ViewableCelestialObject, {}> = {\r\n    module: \"moonshot\",\r\n    entity: \"planet\",\r\n    default: {\r\n        id: \"\",\r\n        attributes: {mass: 0, name: \"\", radius: 0},\r\n        view: {minViewSize: 0, borderColor: \"000000\", color: \"666666\"}\r\n    }\r\n}\r\nexport const planet:Entity<ViewableCelestialObject> = entity<ViewableCelestialObject>(planetDef);\r\n\r\n// --------------------------- //\r\n\r\nconst deltaVDef:IEntityDefinition<IDeltaV, {}> = {\r\n    module: \"moonshot\",\r\n    entity: \"deltaV\",\r\n    default: {id: \"\", deltaV: 0, time: 0, angle: 0}\r\n}\r\nexport const deltaV:Entity<IDeltaV> = entity<IDeltaV>(deltaVDef);\r\n\r\n// --------------------------- //\r\n\r\nconst timerDef:ISingletonDefinition<ITimer, {}> = {\r\n    module: \"moonshot\",\r\n    entity: \"timer\",\r\n    default: {time: 0, steps: 1, dT},\r\n}\r\nexport const timer:Singleton<ITimer, {}> = singleton<ITimer>(timerDef);\r\n\r\n// --------------------------- //\r\n\r\nconst shipDef:ISingletonDefinition<IShip, {}> = {\r\n    module: \"moonshot\",\r\n    entity: \"ship\",\r\n    default: {position:{x: 0, y:0}, velocity: {x: 0, y:0}, initialPosition: {x: 0, y:0}, initialVelocity: {x: 0, y:0}}\r\n};\r\nexport const ship:Singleton<IShip, {}> = singleton<IShip>(shipDef);\r\n\r\n// --------------------------- //\r\n\r\nconst gameDef:ISingletonDefinition<IGame, {}> = {\r\n    module: \"moonshot\",\r\n    entity: \"game\",\r\n    default: {startId: \"\", targetId: \"\", status: \"playing\"}\r\n}\r\nexport const game:Singleton<IGame, {}> = singleton<IGame>(gameDef);\r\n\r\nexport const moonshotReducer = {\r\n    theReducerEntities: theReducer.entity(planet, deltaV),\r\n    theReducerSingletons: theReducer.singleton(timer, ship, game),\r\n}\r\n","import randomRaw from \"random\";\r\nimport seedrandomRaw from \"seedrandom\";\r\n\r\nexport const random = randomRaw;\r\nexport const seedrandom = seedrandomRaw;","import { IVector } from \"./sim\";\r\nimport { prop } from \"ts-functional\";\r\n\r\nexport const Vector = {\r\n    apply: (f:(...args:number[]) => number, ...vectors:IVector[]):IVector => ({\r\n        x: f(...vectors.map(prop(\"x\"))),\r\n        y: f(...vectors.map(prop(\"y\"))),\r\n    }),\r\n    add: (a:IVector, b:IVector):IVector => ({\r\n        x: a.x + b.x,\r\n        y: a.y + b.y,\r\n    }),\r\n    sub: (a:IVector, b:IVector):IVector => ({\r\n        x: a.x - b.x,\r\n        y: a.y - b.y,\r\n    }),\r\n    mul: (m:number, a:IVector):IVector => ({\r\n        x: m * a.x, \r\n        y: m * a.y,\r\n    }),\r\n    len: (a:IVector):number => Math.sqrt(a.x * a.x + a.y * a.y),\r\n}","import { objectId } from \"the-reducer\";\r\nimport { memoize } from \"ts-functional\";\r\nimport { G } from \"./constants\";\r\nimport { ICelestialBody, IVector, ISatellite, ISolverOptions, IShip } from \"./sim\";\r\nimport { Vector } from \"./vector\";\r\n\r\nconst GPrime = 2*Math.PI / Math.sqrt(G);\r\n\r\nexport const period = (p:ISatellite):number => GPrime * Math.sqrt(p.orbit.a * p.orbit.a * p.orbit.a / p.orbit.parent.attributes.mass);\r\n\r\nexport const abs2scr = (position:IVector, offset:IVector, zoom:number):IVector => Vector.apply((p, o) => o + p*zoom, position, offset);\r\n\r\nexport const getDistance = (ship:IShip, planet:ICelestialBody, t:number) =>\r\n    Vector.len(Vector.sub(getPosition(planet, t), ship.position)) - planet.attributes.radius;\r\n\r\n// Solve an equation y = f(x) for x given a target y value via successive approximations\r\nexport const solve = (f:(n:number) => number, options:ISolverOptions) => {\r\n    const maxSteps = options.maxSteps || 50;\r\n    const maxDelta = options.maxDelta || 0.000001;\r\n    const min = options.min || -10;\r\n    const max = options.max || 10;\r\n\r\n    let steps = 0;\r\n    let curMin = min;\r\n    let curMax = max;\r\n    while(f(curMin) * f(curMax) > 0) {curMin*=2; curMax*=2;}\r\n    let check = () => f((curMin + curMax) / 2);\r\n    while(steps === 0 || (steps < maxSteps && Math.abs(check()) > maxDelta)) {\r\n        const avg = (curMin + curMax) / 2;\r\n        if(check() > 0.0) {curMax = avg;}\r\n        else {curMin = avg;}\r\n        steps++;\r\n    }\r\n\r\n    return (curMin + curMax) / 2;\r\n}\r\n\r\n// Source: https://en.wikipedia.org/wiki/Kepler%27s_laws_of_planetary_motion#Position_as_a_function_of_time\r\n// TODO:  Memoize this based on planet object id and t if performance becomes an issue\r\nconst _getPosition = memoize((planet:ICelestialBody, t:number):IVector => {\r\n    if(typeof planet.orbit === \"undefined\") {\r\n        // There is only one sun:  the \"planet\" without an orbit\r\n        return {x:0, y:0};\r\n    } else {\r\n        const s = planet as ISatellite;\r\n\r\n        let M = (s.orbit.n as number) * t + s.orbit.v0;\r\n        if(M > Math.PI) {M = M - Math.floor(Math.PI / M) * Math.PI;}\r\n        const f = (E:number) => E - s.orbit.e * Math.sin(E) - M;\r\n        const E = solve(f, {max: M, min: M/2});\r\n\r\n        const cosE = Math.cos(E);\r\n        const sinV = Math.sqrt(1 - s.orbit.e * s.orbit.e) * Math.sin(E);\r\n        const cosV = cosE - s.orbit.e;\r\n        const vl = Math.sqrt(sinV * sinV + cosV * cosV);\r\n\r\n        const r = s.orbit.a * (1 - s.orbit.e * cosE) / vl;\r\n\r\n        const parentPos = getPosition(s.orbit.parent, t);\r\n        return {\r\n            x: parentPos.x - r * cosV,\r\n            y: parentPos.y + r * sinV,\r\n        };\r\n    }\r\n}, {keyGen: ([p, t]) => `${objectId(p)}:${t}`});\r\n\r\nexport const getPosition = memoize(\r\n    _getPosition,\r\n    {keyGen: (args:[ICelestialBody, number]):string => `${objectId(args[0])}:${args[1]}`}\r\n);","import {random, seedrandom} from \"../compat\";\r\nimport { ViewableCelestialObject, IVector, ISatellite } from \"./sim\";\r\nimport { getPosition, period } from './orbit';\r\nimport { rSun, dGasGiant, rJupiter, rEarth, dRock, aEarth } from './constants';\r\nimport { getMass, sci, orbitalSpeed } from './util';\r\nimport { Vector } from './vector';\r\n\r\nconst getNewSun = ():ViewableCelestialObject => {\r\n    const radius = random.float(0.3, 10) * rSun;\r\n    const mass = random.float(0.9, 1.1) * getMass(radius, dGasGiant);\r\n    return {\r\n        id: \"sun\",\r\n        attributes: {mass, radius, name: \"Sun\"},\r\n        view: {minViewSize: 20, borderColor: \"ffff66\", color: \"ffffaa\"}\r\n    };\r\n}\r\n\r\nconst getNewPlanet = (sun:ViewableCelestialObject, i:number):ViewableCelestialObject[] => {\r\n    const id = `Planet ${i + 1}`;\r\n    const isGasGiant = random.bool();\r\n    const radius = random.float(0.2, 2) * (isGasGiant ?  rJupiter : rEarth);\r\n    const mass = random.float(0.8, 1.2) * getMass(radius, isGasGiant ? dGasGiant : dRock);\r\n    const a = sun.attributes.radius + aEarth / 3 * (i + 1) * random.float(0.8, 1.2);\r\n    const p:ViewableCelestialObject = {\r\n        id,\r\n        attributes: {mass, radius, name: id},\r\n        orbit: {parent: sun, e: random.float(0, 0.9), a, w: random.float(0, 6.28), v0: random.float(0, 6.28)},\r\n        view: {minViewSize: 10, borderColor: \"6666ff\", color: \"aaaaff\"}\r\n    };\r\n    (p as ISatellite).orbit.period = period(p as ISatellite);\r\n    (p as ISatellite).orbit.n = 2 * Math.PI / period(p as ISatellite);\r\n\r\n    const moons:number = random.int(0, 3);\r\n\r\n    const bodies = [p];\r\n    for(let j=0; j<moons; j++) {\r\n        const moonId = `Planet ${i + 1}, Moon ${j + 1}`;\r\n        const moonRadius = random.float(0.01, 0.3) * radius;\r\n        const moonMass = random.float(0.8, 1.2) * getMass(moonRadius, dRock);\r\n        const moonA = p.attributes.radius + sci(2, 8) * (j + 1) * random.float(0.8, 1.2);\r\n        const m:ViewableCelestialObject = {\r\n            id: moonId,\r\n            attributes: {mass: moonMass, radius: moonRadius, name: moonId},\r\n            orbit: {parent: p, e: random.float(0, 0.9), a: moonA, w: random.float(0, 6.28), v0: random.float(0, 6.28)},\r\n            view: {minViewSize: 1, borderColor: \"66ff66\", color: \"aaffaa\"}\r\n        };\r\n        (m as ISatellite).orbit.period = period(m as ISatellite);\r\n        (m as ISatellite).orbit.n = 2 * Math.PI / period(m as ISatellite);\r\n        bodies.push(m);\r\n    }\r\n\r\n    return bodies;\r\n}\r\n\r\n// Perform a seeded random shuffle on a planetery array\r\nconst shuffle = (seed:number, arr:ViewableCelestialObject[]):ViewableCelestialObject[] => arr.sort((a, b) => {\r\n    random.use(seedrandom(`${seed}:${a.id}`));\r\n    const aVal = random.int(0, 1000000);\r\n    random.use(seedrandom(`${seed}:${b.id}`));\r\n    const bVal = random.int(0, 1000000);\r\n    return aVal - bVal;\r\n});\r\n\r\nexport const resetLevel = (level:number) => {\r\n    // List all bodies in the system\r\n    let planets:ViewableCelestialObject[] = [];\r\n\r\n    // Seed the random number generator with the level number\r\n    random.use(seedrandom(`${level}`));\r\n\r\n    // Create the sun\r\n    const sun:ViewableCelestialObject = getNewSun();\r\n    planets.push(sun);\r\n\r\n    // Create the planets\r\n    const count:number = random.int(1, 10);\r\n\r\n    for(let i=0; i<count; i++) {\r\n        const newPlanets = getNewPlanet(sun, i);\r\n        planets = planets.concat(newPlanets);\r\n    }\r\n\r\n    // Choose a starting and target body\r\n    planets = shuffle(random.int(0, 1000000), planets);\r\n    const start = planets[0];\r\n    const target = planets[1];\r\n\r\n    // TODO: Set the initial ship position and velocity around the start planet\r\n    const startPlanetPosition = getPosition(start, 0);\r\n    const orbitalHeight = start.attributes.radius * 1.2;\r\n    const initialPosition = {\r\n        x: startPlanetPosition.x,\r\n        y: startPlanetPosition.y + orbitalHeight,\r\n    }\r\n    const startPlanetVelocity = Vector.sub(getPosition(start, 1), startPlanetPosition);\r\n    const shipVelocity:IVector = Vector.add(startPlanetVelocity, {\r\n        x: orbitalSpeed(start.attributes.mass, orbitalHeight),\r\n        y: 0\r\n    });\r\n\r\n    const newShip = {\r\n        initialPosition,\r\n        initialVelocity: shipVelocity,\r\n        position: initialPosition,\r\n        velocity: shipVelocity,\r\n    };\r\n    \r\n    const levelData = {planets, newShip, startId: start.id, targetId: target.id};\r\n\r\n    console.log(\"New level:\");\r\n    console.log(levelData);\r\n\r\n    return levelData;\r\n}\r\n","import { IShip, ICelestialBody, IDeltaV, IVector, ITimer, Status } from \"./sim\";\r\nimport { getPosition, getDistance } from \"./orbit\";\r\nimport { G } from \"./constants\";\r\nimport { Vector } from \"./vector\";\r\n\r\nconst gravityForce = (position:IVector, planets:ICelestialBody[], t:number) => {\r\n    return planets.reduce((totalForce:IVector, p:ICelestialBody):IVector => {\r\n        // Add force from planets to velocity\r\n        const pPos = getPosition(p, t);\r\n        const dir = Vector.sub(pPos, position);\r\n        const l = Vector.len(dir);\r\n\r\n        const f = G * p.attributes.mass / (l*l);\r\n        return Vector.apply((t, d) => t + f * d / l, totalForce, dir);\r\n    }, {x: 0, y: 0});\r\n\r\n}\r\n\r\n// Update the position and velocity via Runge-Kutta integration:  http://spiff.rit.edu/richmond/nbody/OrbitRungeKutta4.pdf\r\n// Note that there is an error in the source:  In equation 10, vi should be ADDED to the k expressions, not multiplied\r\nconst rk4 = (p0:IVector, v0:IVector, planets:ICelestialBody[], t:number, dT:number):[IVector, IVector] => {\r\n    const a1 = gravityForce(p0, planets, t);\r\n    const v1 = v0;\r\n\r\n    const a2 = gravityForce(Vector.apply((p, v) => p + v * dT/2, p0, v1), planets, t + dT/2);\r\n    const v2 = Vector.apply((v, a) => v + a * dT/2, v0, a1);\r\n\r\n    const a3 = gravityForce(Vector.apply((p, v) => p + v * dT/2, p0, v2), planets, t + dT/2);\r\n    const v3 = Vector.apply((v, a) => v + a * dT/2, v0, a2);\r\n\r\n    const a4 = gravityForce(Vector.apply((p, v) => p + v * dT  , p0, v3), planets, t + dT  );\r\n    const v4 = Vector.apply((v, a) => v + a * dT  , v0, a3);\r\n\r\n    const vNext = Vector.apply((v, a1, a2, a3, a4) => v + dT/6 * (a1 + 2*a2 + 2*a3 + a4), v0, a1, a2, a3, a4);\r\n    const pNext = Vector.apply((p, v1, v2, v3, v4) => p + dT/6 * (v1 + 2*v2 + 2*v3 + v4), p0, v1, v2, v3, v4);\r\n\r\n    return [pNext, vNext];\r\n}\r\n\r\nexport const tick = (ship:IShip, planets:ICelestialBody[], deltaVs:IDeltaV[], timer:ITimer, targetId: string):{\r\n    newShip: IShip,\r\n    newStatus: Status,\r\n    finalTime: number;\r\n} => {\r\n        let position = {...ship.position};\r\n        let velocity = {...ship.velocity};\r\n        const dT = timer.dT;\r\n\r\n        const target = planets.filter(p => p.id === targetId)[0];\r\n\r\n        let newStatus:Status = \"playing\";\r\n        let finalTime = timer.time;\r\n        for(let i=0; i<Math.max(1, timer.steps); i++) {\r\n            const time = timer.time + i * dT;\r\n            finalTime = time;\r\n\r\n            // Update the position and velocity via Runge Kutta integration\r\n            const [p, v] = rk4(position, velocity, planets, time, dT);\r\n            position = p;\r\n            velocity = v;\r\n\r\n            // Update velocity with any delta-Vs\r\n            const matchingDeltaV = deltaVs.filter(d => d.time === time);\r\n            if(matchingDeltaV.length > 0) {\r\n                const deltaV = matchingDeltaV[0];\r\n                velocity.x += deltaV.deltaV * Math.cos(deltaV.angle) * 1000;\r\n                velocity.y += deltaV.deltaV * Math.sin(deltaV.angle) * 1000;\r\n            }\r\n\r\n            // Calculate planet distance to determine if a crash or win occurred\r\n            if(getDistance(ship, target, time) < 0.2 * target.attributes.radius) {\r\n                // Player won!\r\n                newStatus = \"won\";\r\n            } else {\r\n                // Otherwise, check for collisions with any other planet\r\n                planets.forEach(p => {\r\n                    if(getDistance(ship, p, time) < 0) {\r\n                        newStatus = \"dead\";\r\n                    }\r\n                })\r\n            }\r\n            if(newStatus !== \"playing\") {break;}\r\n        }\r\n\r\n        // Update ship with new position and velocity\r\n        return {newShip: {...ship, position, velocity}, newStatus, finalTime: finalTime + dT};\r\n}","import * as React from 'react';\r\nimport { abs2scr, getPosition } from '../../util/orbit';\r\nimport { IVector, ViewableCelestialObject } from '../../util/sim';\r\nimport { PlanetProps } from \"./Planet.d\";\r\nimport './Planet.less';\r\n\r\nconst getContainerStyle = (planet:ViewableCelestialObject, t:number, offset:IVector, zoom:number):React.CSSProperties => {\r\n    const position = getPosition(planet, t);\r\n    const scrPos = abs2scr(position, offset, zoom);\r\n    const displayRadius = Math.max(planet.view.minViewSize , planet.attributes.radius * 2 * zoom);\r\n    const size = `${displayRadius}px`;\r\n    const data = {\r\n        height: size,\r\n        left: `${scrPos.x}px`,\r\n        top: `${scrPos.y}px`,\r\n        width: size,\r\n    };\r\n\r\n    return data;\r\n}\r\n\r\nconst getPlanetStyle = (planet:ViewableCelestialObject, zoom:number):React.CSSProperties => {\r\n    const displayRadius = Math.max(planet.view.minViewSize , planet.attributes.radius * 2 * zoom);\r\n    const size = `${displayRadius}px`;\r\n    const data = {\r\n        background: `#${planet.view.color}`,\r\n        borderRadius: `${displayRadius}px`,\r\n        height: size,\r\n        width: size,\r\n    };\r\n\r\n    return data;\r\n}\r\n\r\nconst getDotStyle = (planet:ViewableCelestialObject, t:number, offset:IVector, zoom:number):React.CSSProperties => {\r\n    const position = getPosition(planet, t);\r\n    const scrPos = abs2scr(position, offset, zoom);\r\n    const data = {\r\n        background: `#ffffff`,\r\n        height: `2px`,\r\n        left: `${scrPos.x - 1}px`,\r\n        top: `${scrPos.y - 1}px`,\r\n        width: `2px`,\r\n    };\r\n\r\n    return data;\r\n}\r\n\r\nexport const PlanetComponent = (props:PlanetProps) => {\r\n    const onClick = () => {\r\n        if(props.onClick) {\r\n            props.onClick(props.id);\r\n        }\r\n    }\r\n    \r\n    return <>\r\n        <div className=\"planet-container\" style={getContainerStyle(props, props.time, props.offset, props.zoom)}>\r\n            <div onClick={onClick} style={getPlanetStyle(props, props.zoom)} />\r\n        </div>\r\n        <div className=\"planet-container\" style={getDotStyle(props, props.time, props.offset, props.zoom)} />\r\n    </>;\r\n}\r\n","import { connect } from 'react-redux';\r\nimport { timer } from '../../util/redux';\r\nimport { PlanetComponent } from './Planet.component';\r\nimport { IPlanetDispatchProps, IPlanetProps, IPlanetStateProps, PlanetProps } from \"./Planet.d\";\r\n\r\n// The mapStateToProps function:  Use this to fetch data from the Redux store via selectors\r\nexport const mapStateToProps = (state:any, props:IPlanetProps):IPlanetStateProps => ({\r\n    time: timer.get(state).time,\r\n});\r\n\r\n// The mapDispatchToProps function:  Use this to define handlers and dispatch basic actions\r\nexport const mapDispatchToProps = (dispatch:any, props:IPlanetProps):IPlanetDispatchProps => ({\r\n\r\n});\r\n\r\n// The mergeProps function:  Use this to define handlers and dispatchers that require access to state props\r\nexport const mergeProps = (state:IPlanetStateProps, dispatch:IPlanetDispatchProps, props:IPlanetProps):PlanetProps => ({\r\n    ...state,\r\n    ...dispatch,\r\n    ...props,\r\n});\r\n\r\nexport const Planet = connect<IPlanetStateProps, IPlanetDispatchProps, IPlanetProps, PlanetProps, any>(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n    mergeProps\r\n)(PlanetComponent);","import { faRocket, faFireAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon as Icon } from \"@fortawesome/react-fontawesome\";\r\nimport * as React from 'react';\r\nimport { abs2scr } from '../../util/orbit';\r\nimport { IVector, IShip } from '../../util/sim';\r\nimport { ShipProps } from \"./Ship.d\";\r\nimport './Ship.less';\r\n\r\nconst getShipStyle = (ship:IShip, offset:IVector, zoom:number, angle:number):React.CSSProperties => {\r\n    const scrPos = abs2scr(ship.position, offset, zoom);\r\n    const data = {\r\n        left: `${scrPos.x - 10}px`,\r\n        top: `${scrPos.y - 13}px`,\r\n        transform: `rotate(${angle + Math.PI / 4}rad)`,\r\n        transformOrigin: \"9px 12px\",\r\n    };\r\n\r\n    return data;\r\n}\r\n\r\nexport const ShipComponent = (props:ShipProps) => \r\n    <div className=\"ship\" style={getShipStyle(props.ship, props.offset, props.zoom, props.angle)}>\r\n        <Icon icon={faRocket} />\r\n        <Icon className=\"fire\" icon={faFireAlt} style={{opacity: props.flameOpacity}} />\r\n    </div>;\r\n    ","import { connect } from 'react-redux';\r\nimport { first, last } from 'ts-functional';\r\nimport { baseSpeed } from '../../util/constants';\r\nimport { deltaV, ship, timer } from '../../util/redux';\r\nimport { IShip } from '../../util/sim';\r\nimport { ShipComponent } from './Ship.component';\r\nimport { IShipDispatchProps, IShipProps, IShipStateProps, ShipProps } from \"./Ship.d\";\r\n\r\n// The mapStateToProps function:  Use this to fetch data from the Redux store via selectors\r\nexport const mapStateToProps = (state:any, props:IShipProps):IShipStateProps => ({\r\n    angle: (() => {\r\n        const time = timer.get(state).time;\r\n        const curDeltaV = first(deltaV.getMultiple(state, (d) => d.time === time));\r\n        if(!!curDeltaV) {return curDeltaV.angle;}\r\n        const prevDeltaV = last(deltaV.getMultiple(state, (d) => d.time < time));\r\n        const nextDeltaV = first(deltaV.getMultiple(state, (d) => d.time > time));\r\n        const prevAngle = !!prevDeltaV ? prevDeltaV.angle : 0;\r\n        const prevTime = !!prevDeltaV ? prevDeltaV.time : 0;\r\n        const nextAngle = !!nextDeltaV ? nextDeltaV.angle : 0;\r\n        const nextTime = !!nextDeltaV ? nextDeltaV.time : 999999;\r\n        const pct = (time - prevTime) / (nextTime - prevTime);\r\n        return pct * (nextAngle - prevAngle) + prevAngle;\r\n    })(),\r\n    flameOpacity: (() => {\r\n        const time = timer.get(state).time;\r\n        const prevDeltaV = last(deltaV.getMultiple(state, (d) => d.time < time));\r\n        const sinceLastBurn = prevDeltaV ? time - prevDeltaV.time : 1000;\r\n        const burnLength = baseSpeed;\r\n        return Math.max(0, (burnLength - sinceLastBurn) / burnLength);\r\n    })(),\r\n    ship: ship.get(state),\r\n});\r\n\r\n// The mapDispatchToProps function:  Use this to define handlers and dispatch basic actions\r\nexport const mapDispatchToProps = (dispatch:any, props:IShipProps):IShipDispatchProps => ({\r\n    update: (s:Partial<IShip>) => {\r\n        dispatch(ship.update(s));\r\n    }\r\n});\r\n\r\n// The mergeProps function:  Use this to define handlers and dispatchers that require access to state props\r\nexport const mergeProps = (state:IShipStateProps, dispatch:IShipDispatchProps, props:IShipProps):ShipProps => ({\r\n    ...state,\r\n    ...dispatch,\r\n    ...props,\r\n});\r\n\r\nexport const Ship = connect<IShipStateProps, IShipDispatchProps, IShipProps, ShipProps, any>(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n    mergeProps\r\n)(ShipComponent);","import * as React from 'react';\r\nimport { zoomSpeed } from '../../util/constants';\r\nimport { getDistance, getPosition } from '../../util/orbit';\r\nimport { IVector } from '../../util/sim';\r\nimport { lengthDisplay } from '../../util/util';\r\nimport { Vector } from '../../util/vector';\r\nimport { Planet } from '../Planet';\r\nimport { Ship } from '../Ship';\r\nimport { ViewportProps } from \"./Viewport.d\";\r\nimport './Viewport.less';\r\n\r\nconst zoomMul = 0.000000001;\r\n\r\nexport const ViewportComponent = (props:ViewportProps) => {\r\n    const [offset, setOffset] = React.useState<IVector>({x: 0, y: 0});\r\n    const [size, setSize] = React.useState<IVector>({x: 0, y: 0});\r\n    const [center, setCenter] = React.useState<IVector>(props.center);\r\n\r\n    const ref = React.createRef<HTMLDivElement>();\r\n    React.useEffect(() => {\r\n        if(ref.current) {\r\n            const width = ref.current.offsetWidth;\r\n            const height = ref.current.offsetHeight;\r\n            if(width !== size.x || height !== size.y) {\r\n                setSize({x: width, y: height});\r\n            }\r\n        }\r\n    }, [ref, size.x, size.y]);\r\n\r\n    const [dragging, setDragging] = React.useState(false);\r\n    const startDragging = () => {setDragging(true);}\r\n    const stopDragging = () => {setDragging(false);}\r\n    const drag = (e:React.MouseEvent) => {\r\n        if(dragging) {\r\n            const newCenter = {\r\n                x: center.x - e.movementX / zoom,\r\n                y: center.y - e.movementY / zoom,\r\n            };\r\n            setCenter(newCenter);\r\n        }\r\n    }\r\n\r\n    const [zoom, setZoom] = React.useState(props.zoom);\r\n    const onZoom = (e:React.WheelEvent) => {\r\n        const up = e.deltaY > 0;\r\n        const mul = up ? 1/zoomSpeed : zoomSpeed;\r\n        setZoom(z => z * mul);\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        setOffset({\r\n            x: size.x / 2 - center.x * zoom,\r\n            y: size.y / 2 - center.y * zoom,\r\n        })\r\n    }, [size, center, zoom]);\r\n\r\n    const [selectedPlanet, setSelectedPlanet] = React.useState(props.initialSelectedPlanetId || \"\");\r\n    const updateSelectedPlanet = (id:string) => {\r\n        setSelectedPlanet(id === selectedPlanet ? \"\" : id);\r\n    }\r\n    const [distance, setDistance] = React.useState<number | undefined>(undefined);\r\n    React.useEffect(() => {\r\n        setDistance(undefined);\r\n        if(selectedPlanet) {\r\n            const planet = props.planets.filter((p => p.id === selectedPlanet))[0];\r\n            const planetPos = getPosition(planet, props.time);\r\n            const selectedPlanetCenter = Vector.mul(zoomMul, planetPos);\r\n            setCenter(selectedPlanetCenter);\r\n            setDistance(getDistance(props.ship, planet, props.time));\r\n        }\r\n    }, [props.initialSelectedPlanetId, selectedPlanet, props.planets, props.ship.position, props.ship, props.time]);\r\n\r\n    const initialCenter = React.useRef(props.center);\r\n    React.useEffect(() => {\r\n        setSelectedPlanet(props.initialSelectedPlanetId || \"\");\r\n        setZoom(props.zoom);\r\n        setCenter(initialCenter.current);\r\n    }, [props.initialSelectedPlanetId, props.zoom]);\r\n\r\n    return <div className={`viewport-container ${props.className}`}>\r\n        <div className=\"viewport-zoom\">\r\n            {!!selectedPlanet ? `${selectedPlanet} - ` : \"\"} Zoom: {zoom.toFixed(1)}\r\n            {!!distance && <><br/>{lengthDisplay(distance)}</>}\r\n        </div>\r\n        <div className=\"viewport-name\">\r\n            {props.name}\r\n        </div>\r\n        <div\r\n            ref={ref}\r\n            className=\"viewport\"\r\n            onMouseDown={startDragging}\r\n            onMouseUp={stopDragging}\r\n            onMouseLeave={stopDragging}\r\n            onMouseMove={drag}\r\n            onWheel={onZoom}\r\n        >\r\n            <Ship zoom={zoom * zoomMul} offset={offset} />\r\n            {props.planets.map(planet =>\r\n                <Planet key={planet.id} {...planet} zoom={zoom * zoomMul} offset={offset} onClick={updateSelectedPlanet} />\r\n            )}\r\n        </div>\r\n    </div>;\r\n}\r\n","import { connect } from 'react-redux';\r\nimport { planet, timer, ship } from '../../util/redux';\r\nimport { ViewportComponent } from './Viewport.component';\r\nimport { IViewportDispatchProps, IViewportProps, IViewportStateProps, ViewportProps } from \"./Viewport.d\";\r\n\r\n// The mapStateToProps function:  Use this to fetch data from the Redux store via selectors\r\nexport const mapStateToProps = (state:any, props:IViewportProps):IViewportStateProps => ({\r\n    planets: planet.getMultiple(state, () => true),\r\n    time: timer.get(state).time,\r\n    ship:ship.get(state),\r\n});\r\n\r\n// The mapDispatchToProps function:  Use this to define handlers and dispatch basic actions\r\nexport const mapDispatchToProps = (dispatch:any, props:IViewportProps):IViewportDispatchProps => ({\r\n\r\n});\r\n\r\n// The mergeProps function:  Use this to define handlers and dispatchers that require access to state props\r\nexport const mergeProps = (state:IViewportStateProps, dispatch:IViewportDispatchProps, props:IViewportProps):ViewportProps => ({\r\n    ...state,\r\n    ...dispatch,\r\n    ...props,\r\n});\r\n\r\nexport const Viewport = connect<IViewportStateProps, IViewportDispatchProps, IViewportProps, ViewportProps, any>(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n    mergeProps\r\n)(ViewportComponent);","import { connect } from 'react-redux';\r\nimport { memoize } from 'ts-functional';\r\nimport { dT } from '../../util/constants';\r\nimport { deltaV, game, planet, ship, timer } from '../../util/redux';\r\nimport { resetLevel } from '../../util/resetLevel';\r\nimport { IShip } from '../../util/sim';\r\nimport { tick } from '../../util/tick';\r\nimport { GameComponent } from './Game.component';\r\nimport { GameProps, IGameDispatchProps, IGameProps, IGameStateProps } from \"./Game.d\";\r\n\r\n// The mapStateToProps function:  Use this to fetch data from the Redux store via selectors\r\nexport const mapStateToProps = (state:any, props:IGameProps):IGameStateProps => ({\r\n    game: game.get(state),\r\n    timer: timer.get(state),\r\n    deltaVs: deltaV.getMultiple(state, () => true).sort((a, b) => a.time - b.time),\r\n    ship: ship.get(state),\r\n    planets: planet.getMultiple(state, () => true),\r\n});\r\n\r\nlet curId = 0;\r\nconst getId = () => `${curId++}`;\r\n\r\n// The mapDispatchToProps function:  Use this to define handlers and dispatch basic actions\r\nexport const mapDispatchToProps = (dispatch:any, props:IGameProps):IGameDispatchProps => ({\r\n    addDeltaV: (time:number) => () => {\r\n        dispatch(deltaV.add({id: getId(), time, deltaV: 0, angle: 0}));\r\n    },\r\n    lose: () => {\r\n        dispatch(game.update({status: \"dead\"}));\r\n    },\r\n    onChangeDeltaV: (id:string, field:string) => (value?:string | number) => {\r\n        dispatch(deltaV.update({id, [field]: value ? +value : 0}));\r\n    },\r\n    onDeleteDeltaV: (id:string) => () => {\r\n        dispatch(deltaV.delete(id));\r\n    },\r\n    resetLevel:memoize(() => (level:number) => {\r\n        const {planets, newShip, startId, targetId} = resetLevel(level);\r\n\r\n        // Clear and reset the old level\r\n        dispatch(timer.update({time: 0, steps: 1, dT}));\r\n        dispatch(planet.clear());\r\n        dispatch(planet.addMultiple(planets));\r\n        dispatch(ship.update(newShip));\r\n        dispatch(game.update({startId, targetId, status: \"playing\"}));\r\n    }, {})(),\r\n    updateShip: (s:Partial<IShip>) => {\r\n        dispatch(ship.update(s));\r\n    },\r\n    updateSpeed: (steps:number) => () => {\r\n        dispatch(timer.update({steps}));\r\n    },\r\n    updateTime: (time:number) => {\r\n        dispatch(timer.update({time}));\r\n    },\r\n    win: () => {\r\n        dispatch(game.update({status: \"won\"}));\r\n    },\r\n});\r\n\r\n// The mergeProps function:  Use this to define handlers and dispatchers that require access to state props\r\nexport const mergeProps = (state:IGameStateProps, dispatch:IGameDispatchProps, props:IGameProps):GameProps => ({\r\n    ...state,\r\n    ...dispatch,\r\n    ...props,\r\n    tick: () => {\r\n        // Don't tick if the game is over\r\n        if([\"dead\", \"won\"].includes(state.game.status)) {return;}\r\n\r\n        const {newShip, newStatus, finalTime} = tick(state.ship, state.planets, state.deltaVs, state.timer, state.game.targetId);\r\n        switch(newStatus) {\r\n            case \"dead\": dispatch.lose(); break;\r\n            case \"won\": dispatch.win(); break;\r\n        }\r\n        \r\n        dispatch.updateTime(finalTime);\r\n        dispatch.updateShip(newShip);\r\n    }\r\n});\r\n\r\nexport const Game = connect<IGameStateProps, IGameDispatchProps, IGameProps, GameProps, any>(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n    mergeProps\r\n)(GameComponent);","import { CloseCircleOutlined, PlusOutlined } from \"@ant-design/icons\";\r\nimport { faBackward, faFastBackward, faForward, faMoon, faPause, faPlay, faRocket, faStepBackward, faStepForward } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon as Icon } from \"@fortawesome/react-fontawesome\";\r\nimport { Button, InputNumber, Layout, Slider, Table, Modal } from 'antd';\r\nimport * as React from 'react';\r\nimport { dT, tickInterval, zoomSpeed } from \"../../util/constants\";\r\nimport { IDeltaV } from \"../../util/sim\";\r\nimport { useTimer } from '../../util/useTimer';\r\nimport { Viewport } from '../Viewport';\r\nimport { GameProps } from \"./Game.d\";\r\nimport './Game.less';\r\n\r\nexport const GameComponent = (props:GameProps) => {\r\n    const {resetLevel, tick} = props;\r\n\r\n    const [isRunning, start, stop] = useTimer({\r\n        interval: tickInterval,\r\n        onTick: tick,\r\n        isRunning: true,\r\n    });\r\n    const [level, setLevel] = React.useState(1);\r\n    const changeLevel = (newLevel:number) => () => {setLevel(newLevel);}\r\n\r\n    const [resetTrigger, setResetTrigger] = React.useState(false);\r\n    React.useEffect(() => {\r\n        resetLevel(level);\r\n        setResetTrigger(r => !r);\r\n    }, [resetLevel, level]);\r\n    const reset = () => {resetLevel(level);}\r\n\r\n    React.useEffect(start, [start]);\r\n\r\n    const deltaVInput = (deltaV:number, record:IDeltaV) => <InputNumber value={deltaV} onChange={props.onChangeDeltaV(record.id, \"deltaV\")} style={{width: \"100%\"}} />;\r\n    const timeInput   = (time:number, record:IDeltaV)   => <InputNumber value={time} onChange={props.onChangeDeltaV(record.id, \"time\")} style={{width: \"100%\"}} step={dT}/>;\r\n    const angleInput  = (angle:number, record:IDeltaV)  =>\r\n        <Slider value={angle} onChange={props.onChangeDeltaV(record.id, \"angle\")} min={0} max={2*Math.PI} step={0.01} />;\r\n    const angleDisplay = (angle:number) => <Icon icon={faRocket} style={{transform: `rotate(${angle + Math.PI / 4}rad)`}}/>;\r\n    const actions     = (id:string) => <CloseCircleOutlined title=\"Remove delta-V\" onClick={props.onDeleteDeltaV(id)} />;\r\n\r\n    const time = (t:number):string => {\r\n        const s = t % 60; t = Math.floor(t/60);\r\n        const m = t % 60; t = Math.floor(t/60);\r\n        const h = t % 24; t = Math.floor(t/24);\r\n        const d = t % 365; t = Math.floor(t/365);\r\n        const y = t;\r\n\r\n        return `${y}:${d}:${h}:${m}:${s}`;\r\n    }\r\n\r\n    return <Layout>\r\n        <Layout.Sider width=\"400px\">\r\n            <h1 className=\"game-title\"><Icon icon={faMoon} /> MoonShot <Icon icon={faMoon} /></h1>\r\n            <hr />\r\n\r\n            <div id=\"level-controls\">\r\n                <h1>Level</h1>\r\n                <div>\r\n                    <Icon icon={faStepBackward} title=\"Previous level\" onClick={level > 1 ? changeLevel(level - 1) : undefined} />\r\n                    <span className=\"curLevel\">{level}</span>\r\n                    <Icon icon={faStepForward} title=\"Next level\" onClick={changeLevel(level + 1)} />\r\n                </div>\r\n            </div>\r\n            <hr />\r\n\r\n            <div id=\"time-controls\">\r\n                <h1 className=\"time\">Time: {time(props.timer.time)}</h1>\r\n                <h1 className=\"speed\">Speedup: {props.timer.steps}</h1>\r\n                <Icon icon={faFastBackward} title=\"Reset level\" onClick={reset}/>\r\n                <Icon icon={faBackward} title=\"Slower\" onClick={props.timer.steps > 1 ? props.updateSpeed(props.timer.steps / 2) : undefined} />\r\n                {isRunning && <Icon icon={faPause} title=\"Pause\" onClick={stop} />}\r\n                {!isRunning && <Icon icon={faPlay} title=\"Play\" onClick={start} />}\r\n                <Icon icon={faForward} title=\"Faster\" onClick={ props.timer.steps < 1024 ? props.updateSpeed(props.timer.steps * 2) : undefined} />\r\n                <Icon icon={faStepForward} title=\"Step forward\" onClick={props.tick} />\r\n            </div>\r\n            <hr />\r\n\r\n            <h1>Delta Vs</h1>\r\n            <Table dataSource={props.deltaVs} rowKey=\"id\" pagination={false} size=\"small\" style={{margin: \"16px\", maxHeight: \"256px\", overflow: \"scroll\"}}>\r\n                <Table.Column dataIndex=\"deltaV\" title=\"Delta-V\" render={deltaVInput} width=\"75px\"/>\r\n                <Table.Column dataIndex=\"time\" title=\"Time\" render={timeInput} width=\"75px\" />\r\n                <Table.Column dataIndex=\"angle\" title=\"Angle\" render={angleInput} />\r\n                <Table.Column dataIndex=\"angle\" render={angleDisplay} width=\"22px\"/>\r\n                <Table.Column dataIndex=\"id\" render={actions} width=\"25px\" />\r\n            </Table>\r\n            <Button onClick={props.addDeltaV(props.timer.time)}><PlusOutlined /> Add delta-V</Button>\r\n\r\n            <hr/>\r\n\r\n            <h1>High Scores for Level {level}</h1>\r\n        </Layout.Sider>\r\n        <Layout.Content className=\"viewports\">\r\n            <Modal visible={props.game.status === \"dead\"} title=\"Game Over!\" footer={null} onCancel={reset}>\r\n                You crashed into a planet!\r\n            </Modal>\r\n            <Modal visible={props.game.status === \"won\"} title=\"You Win!\" footer={null} onCancel={reset}>\r\n                You reached the target planet! Congrats.\r\n            </Modal>\r\n            <Viewport\r\n                name=\"Start\"\r\n                className=\"start-viewport inset-viewport\"\r\n                center={{x: 0, y: 0}}\r\n                zoom={Math.pow(zoomSpeed,50)}\r\n                reset={resetTrigger}\r\n                initialSelectedPlanetId={props.game.startId}\r\n            />\r\n            <Viewport name=\"System overview\" className=\"main-viewport\" center={{x: 0, y: 0}} zoom={1} reset={resetTrigger} />\r\n            <Viewport\r\n                name=\"Target\"\r\n                className=\"end-viewport inset-viewport\"\r\n                center={{x: 0, y: 0}}\r\n                zoom={Math.pow(zoomSpeed, 50)}\r\n                reset={resetTrigger}\r\n                initialSelectedPlanetId={props.game.targetId}\r\n            />\r\n        </Layout.Content>\r\n    </Layout>;\r\n}","import * as React from 'react';\r\n\r\nexport declare interface IUseTimerOptions {\r\n    interval: number;\r\n    onTick: () => void;\r\n    isRunning: boolean;\r\n}\r\n\r\nexport const useTimer = (options:IUseTimerOptions):[boolean, () => void, () => void] => {\r\n    const {interval, onTick} = options;\r\n    \r\n    const [isRunning, setIsRunning] = React.useState(options.isRunning);\r\n\r\n    const stop = React.useCallback(() => {\r\n        setIsRunning(false);\r\n    }, []);\r\n\r\n    const start = React.useCallback(() => {\r\n        setIsRunning(true);\r\n    }, []);\r\n\r\n    const tick = React.useCallback(() => {\r\n        if(isRunning) {\r\n            onTick();\r\n        }\r\n    }, [isRunning, onTick]);\r\n\r\n    React.useEffect(() => {\r\n        const timer = window.setInterval(tick, interval);\r\n        return () => {\r\n            clearInterval(timer);\r\n        }\r\n    }, [interval, tick]);\r\n\r\n    return [isRunning, start, stop];\r\n}\r\n","import React from 'react';\nimport { ReduxContainer } from 'simple-redux-container';\nimport './App.less';\nimport { Game } from './components/Game';\nimport { moonshotReducer } from './util/redux';\n\nexport const App = () => \n  <ReduxContainer\n    reducers={moonshotReducer}\n    useLogger={false}\n    middleware={[]}\n    initialState={{}}\n  >\n    <Game />\n  </ReduxContainer>;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}